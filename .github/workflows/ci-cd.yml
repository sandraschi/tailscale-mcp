name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 2.0.0)'
        required: true
        default: '2.0.0'
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv pip install --system -e .

      - name: Install dev dependencies
        run: uv pip install --system pytest pytest-asyncio pytest-cov pytest-mock ruff mypy pre-commit types-requests

      - name: Run Ruff linter
        run: uv run ruff check .

      - name: Run Ruff formatter
        run: uv run ruff format --check .

      - name: Run MyPy type checker
        run: uv run mypy src/tailscalemcp --ignore-missing-imports

      - name: Run tests
        if: ${{ !inputs.skip_tests }}
        run: uv run pytest -v --cov=tailscalemcp --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv pip install --system -e .

      - name: Install dev dependencies
        run: uv pip install --system pytest pytest-asyncio pytest-cov pytest-mock ruff mypy pre-commit types-requests bandit safety

      - name: Run Bandit security linter
        run: uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Safety check
        run: uv run safety check --json --output safety-report.json || true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint-and-test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install build dependencies
        run: uv pip install --system build twine

      - name: Build package
        run: uv run python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/

  mcpb-build:
    name: Build MCPB Package
    runs-on: ubuntu-latest
    needs: [lint-and-test, security]
    if: github.ref_type == 'tag' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv pip install --system -e .

      - name: Build MCPB package
        run: |
          # Create MCPB bundle
          mkdir -p dist
          cp manifest.json .
          uv run mcpb pack --output dist/tailscale-mcp.mcpb

      - name: Upload MCPB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcpb-package
          path: dist/*.mcpb

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, mcpb-build]
    if: github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Download MCPB artifacts
        uses: actions/download-artifact@v4
        with:
          name: mcpb-package
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this Release
            
            ### üöÄ Features
            - Comprehensive Tailscale MCP server with 12 portmanteau tools
            - 91+ operations across device management, monitoring, security, and more
            
            ### üì¶ Packages
            - Python wheel and source distribution
            - MCPB bundle for easy deployment
            
            ### üõ†Ô∏è Technical
            - FastMCP 2.12 integration
            - Comprehensive test suite with 17 tests
            - Zero Ruff linting errors
            - Security scanning with Bandit, Safety, and Trivy
          files: |
            dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}