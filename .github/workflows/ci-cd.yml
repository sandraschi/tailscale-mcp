name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 2.0.0)'
        required: true
        default: '2.0.0'
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and format check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv pip install --system -e .

      - name: Install dev dependencies
        run: uv pip install --system pytest pytest-asyncio pytest-cov pytest-mock ruff mypy pre-commit types-requests

      - name: Run Ruff linter
        run: uv run ruff check .

      - name: Run Ruff formatter check
        run: uv run ruff format --check .

      - name: Run MyPy type checker
        run: uv run mypy src/

      - name: Check import sorting
        run: uv run ruff check --select I .

  # Test suite with multiple Python versions
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.10"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv pip install --system -e .

      - name: Install dev dependencies
        run: uv pip install --system pytest pytest-asyncio pytest-cov pytest-mock ruff mypy pre-commit types-requests

      - name: Run tests with pytest
        run: uv run pytest --cov=tailscalemcp --cov-report=xml --cov-report=html --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            coverage.xml
            coverage_html/
            .coverage

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv pip install --system -e .

      - name: Install dev dependencies
        run: uv pip install --system pytest pytest-asyncio pytest-cov pytest-mock ruff mypy pre-commit types-requests bandit safety

      - name: Run Bandit security linter
        run: uv run bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Safety check
        run: uv run safety check --json --output safety-report.json || true

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
          generateSarif: "1"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            semgrep.sarif

  # Build Python package
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install build dependencies
        run: uv pip install --system build twine

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")" >> $GITHUB_OUTPUT
          fi

      - name: Build package
        run: uv run python -m build

      - name: Check package
        run: uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Build MCPB package
  mcpb-build:
    name: Build MCPB Package
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install dependencies
        run: uv pip install --system -e .

      - name: Install MCPB CLI
        run: npm install -g @anthropic-ai/mcpb

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Validate MCPB manifest
        run: mcpb validate manifest.json

      - name: Build MCPB package
        run: mcpb pack . dist/tailscale-mcp-v${{ needs.build.outputs.version }}.mcpb

      - name: Upload MCPB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcpb-package
          path: dist/*.mcpb

  # Build Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Create GitHub Release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, mcpb-build, docker]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Download MCPB artifacts
        uses: actions/download-artifact@v4
        with:
          name: mcpb-package
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          if [ -f CHANGELOG.md ]; then
            # Extract changelog for current version
            version="${{ needs.build.outputs.version }}"
            awk "/^## \[$version\]/,/^## \[/" CHANGELOG.md | head -n -1 > release_notes.md
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            cat release_notes.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Release ${{ needs.build.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.build.outputs.version }}
          name: Tailscale MCP v${{ needs.build.outputs.version }}
          body: |
            ## 🚀 Tailscale MCP v${{ needs.build.outputs.version }}
            
            ### 📦 Downloads
            - **MCPB Bundle**: `tailscale-mcp-v${{ needs.build.outputs.version }}.mcpb` - Drag to Claude Desktop for installation
            - **Python Package**: `tailscalemcp-${{ needs.build.outputs.version }}-py3-none-any.whl` - Install via pip
            - **Source Distribution**: `tailscalemcp-${{ needs.build.outputs.version }}.tar.gz` - Source code archive
            
            ### 🐳 Docker
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.build.outputs.version }}
            ```
            
            ### 📋 Installation
            1. Download the `.mcpb` file from assets below
            2. Drag the file to Claude Desktop
            3. Configure your Tailscale API key and tailnet
            4. Start using the 10 portmanteau tools with 74 operations!
            
            ### 🔧 What's New
            ${{ steps.changelog.outputs.changelog }}
            
            ### 📚 Documentation
            - [README](https://github.com/${{ github.repository }}#readme)
            - [API Reference](https://github.com/${{ github.repository }}/blob/main/docs/API_REFERENCE.md)
            - [Architecture Guide](https://github.com/${{ github.repository }}/blob/main/docs/ARCHITECTURE_AND_DESIGN.md)
          files: |
            dist/*.mcpb
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to PyPI (if needed in future)
  pypi-deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.event.release.tag_name, 'alpha') && !contains(github.event.release.tag_name, 'beta') && !contains(github.event.release.tag_name, 'rc')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install twine
        run: uv pip install --system twine

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: uv run twine upload dist/*.whl dist/*.tar.gz

  # Notify on completion
  notify:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [release, pypi-deploy]
    if: always()
    steps:
      - name: Notify Success
        if: needs.release.result == 'success'
        run: |
          echo "✅ Release completed successfully!"
          echo "🚀 Tailscale MCP v${{ needs.build.outputs.version }} is now available"
          echo "📦 MCPB bundle: tailscale-mcp-v${{ needs.build.outputs.version }}.mcpb"
          echo "🐳 Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v${{ needs.build.outputs.version }}"

      - name: Notify Failure
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release failed!"
          echo "Check the logs for details."
